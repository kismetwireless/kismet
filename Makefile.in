include Makefile.inc

CONFIGFILES = \
	kismet.conf \
	kismet_httpd.conf \
	kismet_alerts.conf \
	kismet_memory.conf \
	kismet_logging.conf \
	kismet_filter.conf \
	kismet_uav.conf \
	kismet_80211.conf \
	kismet_wardrive.conf

# Parsers (modeled on former Kaitai model)
PARSERS = \
	dot11_parsers/dot11_ie.cc.o \
	dot11_parsers/dot11_ie_7_country.cc.o \
	dot11_parsers/dot11_ie_11_qbss.cc.o \
	dot11_parsers/dot11_ie_33_power.cc.o \
	dot11_parsers/dot11_ie_35_tpc.cc.o \
	dot11_parsers/dot11_ie_36_supported_channels.cc.o \
	dot11_parsers/dot11_ie_45_ht_cap.cc.o \
	dot11_parsers/dot11_ie_48_rsn.cc.o \
	dot11_parsers/dot11_ie_52_rmm_neighbor.cc.o \
	dot11_parsers/dot11_ie_54_mobility.cc.o \
	dot11_parsers/dot11_ie_55_fastbss.cc.o \
	dot11_parsers/dot11_ie_61_ht_op.cc.o \
	dot11_parsers/dot11_ie_70_rm_capabilities.cc.o \
	dot11_parsers/dot11_ie_113_mesh_config.cc.o \
	dot11_parsers/dot11_ie_133_cisco_ccx.cc.o \
	dot11_parsers/dot11_ie_150_vendor.cc.o \
	dot11_parsers/dot11_ie_150_cisco_powerlevel.cc.o \
    dot11_parsers/dot11_ie_191_vht_cap.cc.o \
    dot11_parsers/dot11_ie_192_vht_op.cc.o \
	dot11_parsers/dot11_ie_127_extended_capabilities.cc.o \
    dot11_parsers/dot11_ie_221_vendor.cc.o \
    dot11_parsers/dot11_ie_221_ms_wps.cc.o \
    dot11_parsers/dot11_ie_221_ms_wmm.cc.o \
    dot11_parsers/dot11_ie_221_dji_droneid.cc.o \
    dot11_parsers/dot11_ie_221_wfa_wpa.cc.o \
	dot11_parsers/dot11_ie_221_cisco_client_mfp.cc.o \
	dot11_parsers/dot11_ie_221_wpa_transition.cc.o \
	dot11_parsers/dot11_ie_221_rsn_pmkid.cc.o \
	dot11_parsers/dot11_ie_221_wfa.cc.o \
	dot11_parsers/dot11_ie_255_ext_tag.cc.o \
	dot11_parsers/dot11_action.cc.o \
	dot11_parsers/dot11_wpa_eap.cc.o \
	dot11_parsers/dot11_p2p_ie.cc.o \
	bluetooth_parsers/btle.cc.o 

# To prevent a deps problem, we define these targets via autoconf to reference
# the variable setting the list
PROTOBUF_CPP_O_TARGET = @PROTOBUF_CPP_O_TARGET@
PROTOBUF_CPP_O = \
	protobuf_cpp/kismet.pb.cc.o \
	protobuf_cpp/http.pb.cc.o \
	protobuf_cpp/datasource.pb.cc.o \
	protobuf_cpp/linuxbluetooth.pb.cc.o \
	protobuf_cpp/eventbus.pb.cc.o 

PROTOBUF_CPP_H_TARGET = @PROTOBUF_CPP_H_TARGET@
PROTOBUF_CPP_H = \
	protobuf_cpp/kismet.pb.h \
	protobuf_cpp/http.pb.h \
	protobuf_cpp/datasource.pb.h \
	protobuf_cpp/linuxbluetooth.pb.h \
	protobuf_cpp/eventbus.pb.h 

# Common pure-c code for capturesource binaries
DATASOURCE_COMMON_C_O = \
    mpack/mpack.c.o \
	simple_ringbuf_c.c.o version.c.o capture_framework.c.o 
DATASOURCE_COMMON_A = libkismetdatasource.a

CAPTURE_PCAPFILE_O = \
	capture_pcapfile.c.o
CAPTURE_PCAPFILE 	= kismet_cap_pcapfile
BUILD_CAPTURE_PCAPFILE = @BUILD_CAPTURE_PCAPFILE@

CAPTURE_KISMETDB_O = \
	capture_kismetdb.c.o
CAPTURE_KISMETDB 	= kismet_cap_kismetdb
BUILD_CAPTURE_KISMETDB = @BUILD_CAPTURE_KISMETDB@

CAPTURE_LINUX_WIFI	= capture_linux_wifi/kismet_cap_linux_wifi
BUILD_CAPTURE_LINUX_WIFI = @BUILD_CAPTURE_LINUX_WIFI@

CAPTURE_OPENBSD_WIFI	= capture_openbsd_wifi/kismet_cap_openbsd_wifi
BUILD_CAPTURE_OPENBSD_WIFI = @BUILD_CAPTURE_OPENBSD_WIFI@

CAPTURE_HACKRF_SWEEP_O = \
	capture_hackrf_sweep.c.o
CAPTURE_HACKRF_SWEEP = kismet_cap_hackrf_sweep
BUILD_CAPTURE_HACKRF_SWEEP = @BUILD_CAPTURE_HACKRF_SWEEP@

CAPTURE_LINUX_BLUETOOTH = capture_linux_bluetooth/kismet_cap_linux_bluetooth
BUILD_CAPTURE_LINUX_BLUETOOTH = @BUILD_CAPTURE_LINUX_BLUETOOTH@

CAPTURE_OSX_COREWLAN = capture_osx_corewlan_wifi/kismet_cap_osx_corewlan_wifi
BUILD_CAPTURE_OSX_COREWLAN = @BUILD_CAPTURE_OSX_COREWLAN@

# CAPTURE_SDR_RTL433 = capture_sdr_rtl433/kismet_cap_sdr_rtl433
# BUILD_CAPTURE_SDR_RTL433 = @BUILD_CAPTURE_SDR_RTL433@

# CAPTURE_SDR_RTLAMR = capture_sdr_rtlamr/kismet_cap_sdr_rtlamr
# BUILD_CAPTURE_SDR_RTLAMR = @BUILD_CAPTURE_SDR_RTLAMR@

# CAPTURE_SDR_RTLADSB = capture_sdr_rtladsb/kismet_cap_sdr_rtladsb
# BUILD_CAPTURE_SDR_RTLADSB = @BUILD_CAPTURE_SDR_RTLADSB@

# CAPTURE_BT_GEIGER = capture_bt_geiger/kismet_cap_bt_geiger
# BUILD_CAPTURE_BT_GEIGER = @BUILD_CAPTURE_BT_GEIGER@
#
CAPTURE_SDR_RTL433V2 = capture_sdr_rtl433_v2/kismet_cap_sdr_rtl433
BUILD_CAPTURE_SDR_RTL433V2 = @BUILD_CAPTURE_SDR_RTL433V2@

CAPTURE_SDR_RTLADSBV2 = capture_sdr_rtladsb_v2/kismet_cap_sdr_rtladsb
BUILD_CAPTURE_SDR_RTLADSBV2 = @BUILD_CAPTURE_SDR_RTLADSBV2@

CAPTURE_FREAKLABS_ZIGBEEV2 = capture_freaklabs_zigbee_v2/kismet_cap_freaklabs_zigbee
BUILD_CAPTURE_FREAKLABS_ZIGBEEV2 = @BUILD_CAPTURE_FREAKLABS_ZIGBEEV2@

CAPTURE_NRF_MOUSEJACK = capture_nrf_mousejack/kismet_cap_nrf_mousejack
BUILD_CAPTURE_NRF_MOUSEJACK = @BUILD_CAPTURE_NRF_MOUSEJACK@

CAPTURE_TI_CC_2540 = capture_ti_cc_2540/kismet_cap_ti_cc_2540
BUILD_CAPTURE_TI_CC_2540 = @BUILD_CAPTURE_TI_CC_2540@

CAPTURE_TI_CC_2531 = capture_ti_cc_2531/kismet_cap_ti_cc_2531
BUILD_CAPTURE_TI_CC_2531 = @BUILD_CAPTURE_TI_CC_2531@

CAPTURE_UBERTOOTH_ONE = capture_ubertooth_one/kismet_cap_ubertooth_one
BUILD_CAPTURE_UBERTOOTH_ONE = @BUILD_CAPTURE_UBERTOOTH_ONE@

CAPTURE_NRF_51822 = capture_nrf_51822/kismet_cap_nrf_51822
BUILD_CAPTURE_NRF_51822 = @BUILD_CAPTURE_NRF_51822@

CAPTURE_NXP_KW41Z = capture_nxp_kw41z/kismet_cap_nxp_kw41z
BUILD_CAPTURE_NXP_KW41Z = @BUILD_CAPTURE_NXP_KW41Z@

CAPTURE_NRF_52840 = capture_nrf_52840/kismet_cap_nrf_52840
BUILD_CAPTURE_NRF_52840 = @BUILD_CAPTURE_NRF_52840@

CAPTURE_RZ_KILLERBEE = capture_rz_killerbee/kismet_cap_rz_killerbee
BUILD_CAPTURE_RZ_KILLERBEE = @BUILD_CAPTURE_RZ_KILLERBEE@

CAPTURE_BLADERF_WIPHY = capture_bladerf_wiphy/kismet_cap_bladerf_wiphy
BUILD_CAPTURE_BLADERF_WIPHY = @BUILD_CAPTURE_BLADERF_WLAN@

CAPTURE_HAK5_COCONUT = capture_hak5_wifi_coconut/kismet_cap_hak5_wifi_coconut
BUILD_CAPTURE_HAK5_COCONUT = @BUILD_CAPTURE_HAK5_COCONUT@

CAPTURE_SERIAL_RADVIEW = capture_serial_radview/kismet_cap_serial_radview
BUILD_CAPTURE_SERIAL_RADVIEW = @BUILD_CAPTURE_SERIAL_RADVIEW@

CAPTURE_USB_RADIACODE = capture_radiacode/kismet_cap_radiacode_usb
BUILD_CAPTURE_USB_RADIACODE = @BUILD_CAPTURE_USB_RADIACODE@

CAPTURE_ANTSDR_DRONEID = capture_antsdr_droneid/kismet_cap_antsdr_droneid
BUILD_CAPTURE_ANTSDR_DRONEID = @BUILD_CAPTURE_ANTSDR_DRONEID@

CAPTURE_CATSNIFFER_ZIGBEE = capture_catsniffer_zigbee/kismet_cap_catsniffer_zigbee
BUILD_CAPTURE_CATSNIFFER_ZIGBEE = @BUILD_CAPTURE_CATSNIFFER_ZIGBEE@

# Capture binaries to build
DATASOURCE_BINS = @DATASOURCE_BINS@

LOGTOOL_KISMETDB_STRIP = log_tools/kismetdb_strip_packets
LOGTOOL_KISMETDB_STRIP_O = \
	log_tools/kismetdb_strip_packet_content.c.o

LOGTOOL_KISMETDB_WIGLE = log_tools/kismetdb_to_wiglecsv
LOGTOOL_KISMETDB_WIGLE_O = \
	version.c.o \
	log_tools/kismetdb_to_wiglecsv.cc.o \
	sqlite3_cpp11.cc.o 

LOGTOOL_KISMETDB_JSON = log_tools/kismetdb_dump_devices
LOGTOOL_KISMETDB_JSON_O = \
	log_tools/kismetdb_dump_devices.cc.o \
	sqlite3_cpp11.cc.o

LOGTOOL_KISMETDB_STATS = log_tools/kismetdb_statistics
LOGTOOL_KISMETDB_STATS_O = \
	log_tools/kismetdb_statistics.cc.o \
	sqlite3_cpp11.cc.o 

LOGTOOL_KISMETDB_KML = log_tools/kismetdb_to_kml
LOGTOOL_KISMETDB_KML_O = \
	log_tools/kismetdb_to_kml.cc.o \
	sqlite3_cpp11.cc.o 

LOGTOOL_KISMETDB_GPX = log_tools/kismetdb_to_gpx
LOGTOOL_KISMETDB_GPX_O = \
	log_tools/kismetdb_to_gpx.cc.o \
	sqlite3_cpp11.cc.o 

LOGTOOL_KISMETDB_CLEAN = log_tools/kismetdb_clean
LOGTOOL_KISMETDB_CLEAN_O = \
	log_tools/kismetdb_clean.cc.o \
	sqlite3_cpp11.cc.o 

LOGTOOL_KISMETDB_PCAP = log_tools/kismetdb_to_pcap
LOGTOOL_KISMETDB_PCAP_O = \
	log_tools/kismetdb_to_pcap.cc.o \
	sqlite3_cpp11.cc.o 

LOGTOOL_BINS = \
	$(LOGTOOL_KISMETDB_STRIP) \
	$(LOGTOOL_KISMETDB_WIGLE) \
	$(LOGTOOL_KISMETDB_JSON) \
	$(LOGTOOL_KISMETDB_STATS) \
	$(LOGTOOL_KISMETDB_KML) \
	$(LOGTOOL_KISMETDB_GPX) \
	$(LOGTOOL_KISMETDB_CLEAN) \
	$(LOGTOOL_KISMETDB_PCAP)

TOOL_KISMET_DISCOVERY = tools/kismet_discovery
TOOL_KISMET_DISCOVERY_O = \
	tools/kismet_discovery.cc.o

TOOL_BINS = \
	$(TOOL_KISMET_DISCOVERY)

PSO	= util.cc.o crc32.cc.o macaddr.cc.o uuid.cc.o xxhash.cc.o boost_like_hash.cc.o \
	sqlite3_cpp11.cc.o mpack/mpack.c.o \
	globalregistry.cc.o eventbus.cc.o \
	packet.cc.o configfile.cc.o \
	battery.cc.o \
	ipctracker_v2.cc.o \
	$(PROTOBUF_CPP_O_TARGET) kis_external.cc.o \
	dlttracker.cc.o antennatracker.cc.o datasourcetracker.cc.o kis_datasource.cc.o \
	datasource_linux_bluetooth.cc.o datasource_rtl433.cc.o datasource_rtlamr.cc.o datasource_rtladsb.cc.o \
	datasource_ti_cc_2540.cc.o datasource_ti_cc_2531.cc.o datasource_ubertooth_one.cc.o datasource_nrf_51822.cc.o \
	datasource_nxp_kw41z.cc.o datasource_nrf_52840.cc.o datasource_rz_killerbee.cc.o datasource_scan.cc.o \
	datasource_bt_geiger.cc.o datasource_mqtt.cc.o \
	datasource_catsniffer_zigbee.cc.o \
	kis_net_beast_httpd.cc.o kis_httpd_registry.cc.o \
	system_monitor.cc.o \
	base64.cc.o \
	gpstracker.cc.o kis_gps.cc.o gpsnmea_v2.cc.o gpsserial_v3.cc.o gpstcp_v2.cc.o \
	gpsgpsd_v3.cc.o gpsfake.cc.o gpsweb.cc.o gpsmeta.cc.o \
	packetchain.cc.o packet_filter.cc.o class_filter.cc.o \
	trackedelement.cc.o trackedelement_workers.cc.o trackedcomponent.cc.o entrytracker.cc.o \
	trackedlocation.cc.o devicetracker_component.cc.o \
	devicetracker_view.cc.o devicetracker_view_workers.cc.o \
	kis_server_announce.cc.o \
	json_adapter.cc.o \
	plugintracker.cc.o alertracker.cc.o timetracker.cc.o channeltracker2.cc.o \
	devicetracker.cc.o devicetracker_httpd.cc.o \
	kis_dlt.cc.o kis_dlt_ppi.cc.o kis_dlt_radiotap.cc.o kis_dlt_btle_radio.cc.o \
	kaitaistream.cc.o \
	$(PARSERS) \
	phy_80211.cc.o phy_80211_components.cc.o phy_80211_dissectors.cc.o \
	phy_sensor.cc.o phy_meter.cc.o phy_adsb.cc.o phy_zwave.cc.o \
	phy_bluetooth.cc.o phy_uav_drone.cc.o phy_nrf_mousejack.cc.o phy_btle.cc.o phy_802154.cc.o \
	phy_80211_ssidtracker.cc.o phy_radiation.cc.o \
	kis_dissector_ipdata.cc.o \
	manuf.cc.o bluetooth_ids.cc.o adsb_icao.cc.o \
	logtracker.cc.o kis_ppilogfile.cc.o kis_databaselogfile.cc.o kis_pcapnglogfile.cc.o \
	kis_wiglecsvlogfile.cc.o \
	messagebus_restclient.cc.o \
	streamtracker.cc.o \
	kis_database.cc.o \
	kismet_server.cc.o

PS	= kismet

STD_ALL = Makefile $(PS) $(DATASOURCE_BINS) $(LOGTOOL_BINS) $(TOOL_BINS)
DS_ONLY = Makefile $(DATASOURCE_BINS)

ALL	= @ALLTARGETS@

INSTBINS = $(PS) $(DATASOURCE_BINS) $(LOGTOOL_BINS) $(TOOL_BINS)

# Detect date from variables or now
ifdef SOURCE_DATE_EPOCH
	BUILD_DATE ?= $(shell date -u -d "@$(SOURCE_DATE_EPOCH)" 2>/dev/null || date -u -r "$(SOURCE_DATE_EPOCH)" 2>/dev/null || date -u)
else
	BUILD_DATE ?= $(shell date -u)
endif

all:	$(ALL)

all-with-plugins:
	@make plugins-clean
	@make all
	@make plugins

# Build a version using the SOURCE_DATE_EPOCH environment variable, or current timestamp, 
# and a named version.  Failure to run this script results in building as the latest.
version-%:
	@./tools/mkversion.sh "$(BUILD_DATE)" $*

# Build a version file for the current time and git
version:
	@./tools/mkversion.sh

# If the builder hasn't run `make version-maj-min-tiny` then assume we're building git and 
# generate it as a git based on the requested timestamp (or now)
version.c:
	./tools/mkversion.sh "$(BUILD_DATE)"

# This is no longer a special thing but keep it separate for now
version.c.o : version.c version.c.d
	$(CC) $(CFLAGS) $(CPPFLAGS) -c version.c -o version.c.o

$(PS):	$(PROTOBUF_CPP_O_TARGET) $(PROTOBUF_CPP_H_TARGET) $(PSO) $(patsubst %c.o,%c.d,$(PSO)) version.c.o
	@rm -f kismet
	$(LD) $(LDFLAGS) -o $(PS) $(PSO) version.c.o $(LIBS) $(CXXLIBS) $(PCAPLIBS) $(KSLIBS) -rdynamic


$(LOGTOOL_KISMETDB_STRIP):	$(LOGTOOL_KISMETDB_STRIP_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_STRIP_O))
	$(CC) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_STRIP) $(LOGTOOL_KISMETDB_STRIP_O) -lsqlite3 -rdynamic

$(LOGTOOL_KISMETDB_WIGLE):	$(LOGTOOL_KISMETDB_WIGLE_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_WIGLE_O))
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_WIGLE) $(LOGTOOL_KISMETDB_WIGLE_O) $(LIBS) $(CXXLIBS) -rdynamic

$(LOGTOOL_KISMETDB_JSON):	$(LOGTOOL_KISMETDB_JSON_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_JSON_O))
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_JSON) $(LOGTOOL_KISMETDB_JSON_O) $(LIBS) $(CXXLIBS) -rdynamic

$(LOGTOOL_KISMETDB_STATS):	$(LOGTOOL_KISMETDB_STATS_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_STATS_O))
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_STATS) $(LOGTOOL_KISMETDB_STATS_O) $(LIBS) $(CXXLIBS) -rdynamic

$(LOGTOOL_KISMETDB_KML):	$(LOGTOOL_KISMETDB_KML_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_KML_O))
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_KML) $(LOGTOOL_KISMETDB_KML_O) $(LIBS) $(CXXLIBS) -rdynamic

$(LOGTOOL_KISMETDB_GPX):	$(LOGTOOL_KISMETDB_GPX_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_GPX_O))
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_GPX) $(LOGTOOL_KISMETDB_GPX_O) $(LIBS) $(CXXLIBS) -rdynamic

$(LOGTOOL_KISMETDB_CLEAN):	$(LOGTOOL_KISMETDB_CLEAN_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_CLEAN_O))
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_CLEAN) $(LOGTOOL_KISMETDB_CLEAN_O) $(LIBS) $(CXXLIBS) -rdynamic

$(LOGTOOL_KISMETDB_PCAP): 	$(LOGTOOL_KISMETDB_PCAP_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_PCAP_O)) version.c.o
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_PCAP) $(LOGTOOL_KISMETDB_PCAP_O) version.c.o $(LIBS) $(CXXLIBS) $(PCAPLIBS) -rdynamic



$(TOOL_KISMET_DISCOVERY): 	$(TOOL_KISMET_DISCOVERY_O) $(patsubst %c.o,%c.d,$(TOOL_KISMET_DISCOVERY_O)) version.c.o
	$(LD) $(LDFLAGS) -o $(TOOL_KISMET_DISCOVERY) $(TOOL_KISMET_DISCOVERY_O) version.c.o $(LIBS) $(CXXLIBS) -rdynamic



$(DATASOURCE_COMMON_A):	mpack/mpack.c.o $(DATASOURCE_COMMON_C_O)
	$(AR) rcs $(DATASOURCE_COMMON_A) $(DATASOURCE_COMMON_C_O)

$(CAPTURE_PCAPFILE):	$(DATASOURCE_COMMON_A) $(CAPTURE_PCAPFILE_O)
	$(CC) $(LDFLAGS) -o $(CAPTURE_PCAPFILE) $(CAPTURE_PCAPFILE_O) $(DATASOURCE_COMMON_A) $(PCAPLIBS) $(DATASOURCE_LIBS)

$(CAPTURE_KISMETDB):	$(DATASOURCE_COMMON_A) $(CAPTURE_KISMETDB_O)
	$(CC) $(LDFLAGS) -o $(CAPTURE_KISMETDB) $(CAPTURE_KISMETDB_O) $(DATASOURCE_COMMON_A) $(DATASOURCE_LIBS) -lsqlite3

$(CAPTURE_LINUX_WIFI):	$(DATASOURCE_COMMON_A) FORCE
	(cd capture_linux_wifi && $(MAKE))

$(CAPTURE_LINUX_BLUETOOTH):	$(DATASOURCE_COMMON_A) FORCE
	(cd capture_linux_bluetooth && $(MAKE))

$(CAPTURE_OPENBSD_WIFI):	$(DATASOURCE_COMMON_A) FORCE
	(cd capture_openbsd_wifi && $(MAKE))

$(CAPTURE_OSX_COREWLAN): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_osx_corewlan_wifi && $(MAKE))

# $(CAPTURE_SDR_RTL433): FORCE
# 	(cd capture_sdr_rtl433 && $(MAKE))
# 
# $(CAPTURE_SDR_RTLAMR): FORCE
# 	(cd capture_sdr_rtlamr && $(MAKE))
# 
# $(CAPTURE_SDR_RTLADSB): FORCE
# 	(cd capture_sdr_rtladsb && $(MAKE))
# 
# $(CAPTURE_BT_GEIGER): FORCE
# 	(cd capture_bt_geiger && $(MAKE))

$(CAPTURE_SDR_RTL433V2): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_sdr_rtl433_v2 && $(MAKE))

$(CAPTURE_SDR_RTLADSBV2): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_sdr_rtladsb_v2 && $(MAKE))

$(CAPTURE_HACKRF_SWEEP):	$(DATASOURCE_COMMON_A) $(CAPTURE_HACKRF_SWEEP_O)
	$(CC) $(LDFLAGS) -o $(CAPTURE_HACKRF_SWEEP) $(CAPTURE_HACKRF_SWEEP_O) $(DATASOURCE_COMMON_A) -lhackrf -lfftw3 $(LIBMLIB) -lpthread -lm

$(CAPTURE_NRF_MOUSEJACK): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_nrf_mousejack && $(MAKE))

$(CAPTURE_TI_CC_2540): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_ti_cc_2540 && $(MAKE))

$(CAPTURE_TI_CC_2531): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_ti_cc_2531 && $(MAKE))

$(CAPTURE_UBERTOOTH_ONE): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_ubertooth_one && $(MAKE))

$(CAPTURE_NRF_51822): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_nrf_51822 && $(MAKE))

$(CAPTURE_NXP_KW41Z): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_nxp_kw41z && $(MAKE))

$(CAPTURE_NRF_52840): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_nrf_52840 && $(MAKE))

$(CAPTURE_RZ_KILLERBEE): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_rz_killerbee && $(MAKE))

$(CAPTURE_FREAKLABS_ZIGBEEV2): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_freaklabs_zigbee_v2 && $(MAKE))

$(CAPTURE_CATSNIFFER_ZIGBEE): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_catsniffer_zigbee && $(MAKE))

$(CAPTURE_BLADERF_WIPHY): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_bladerf_wiphy && $(MAKE))

$(CAPTURE_HAK5_COCONUT): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_hak5_wifi_coconut && $(MAKE))

$(CAPTURE_SERIAL_RADVIEW): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_serial_radview && $(MAKE))

$(CAPTURE_USB_RADIACODE): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_radiacode && $(MAKE))

$(CAPTURE_ANTSDR_DRONEID): $(DATASOURCE_COMMON_A) FORCE
	(cd capture_antsdr_droneid && $(MAKE))

FORCE:

datasources:	$(DATASOURCE_BINS)

Makefile: Makefile.in configure
	@-echo "'Makefile.in' or 'configure' are more current than this Makefile.  You should re-run 'configure'."

binsuidinstall: $(DATASOURCE_BINS)
	mkdir -p $(BIN)

	@if test "$(BUILD_CAPTURE_LINUX_WIFI)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_LINUX_WIFI) $(BIN)/`basename $(CAPTURE_LINUX_WIFI)`; \
	fi;

	@if test "$(BUILD_CAPTURE_LINUX_BLUETOOTH)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_LINUX_BLUETOOTH) $(BIN)/`basename $(CAPTURE_LINUX_BLUETOOTH)`; \
	fi;

	@if test "$(BUILD_CAPTURE_OPENBSD_WIFI)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_OPENBSD_WIFI) $(BIN)/`basename $(CAPTURE_OPENBSD_WIFI)`; \
	fi;

	@if test "$(BUILD_CAPTURE_OSX_COREWLAN)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_OSX_COREWLAN) $(BIN)/`basename $(CAPTURE_OSX_COREWLAN)`; \
	fi;

	@if test "$(BUILD_CAPTURE_NRF_MOUSEJACK)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_NRF_MOUSEJACK) $(BIN)/`basename $(CAPTURE_NRF_MOUSEJACK)`; \
	fi;

	@if test "$(BUILD_CAPTURE_TI_CC_2540)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_TI_CC_2540) $(BIN)/`basename $(CAPTURE_TI_CC_2540)`; \
	fi;

	@if test "$(BUILD_CAPTURE_TI_CC_2531)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_TI_CC_2531) $(BIN)/`basename $(CAPTURE_TI_CC_2531)`; \
	fi;

	@if test "$(BUILD_CAPTURE_UBERTOOTH_ONE)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_UBERTOOTH_ONE) $(BIN)/`basename $(CAPTURE_UBERTOOTH_ONE)`; \
        fi;

	@if test "$(BUILD_CAPTURE_NRF_51822)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_NRF_51822) $(BIN)/`basename $(CAPTURE_NRF_51822)`; \
	fi;

	@if test "$(BUILD_CAPTURE_NRF_52840)"x = "1"x; then \
			$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_NRF_52840) $(BIN)/`basename $(CAPTURE_NRF_52840)`; \
	fi;

	@if test "$(BUILD_CAPTURE_NXP_KW41Z)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_NXP_KW41Z) $(BIN)/`basename $(CAPTURE_NXP_KW41Z)`; \
	fi;

	@if test "$(BUILD_CAPTURE_RZ_KILLERBEE)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_RZ_KILLERBEE) $(BIN)/`basename $(CAPTURE_RZ_KILLERBEE)`; \
	fi;

	@if test "$(BUILD_CAPTURE_BLADERF_WIPHY)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_BLADERF_WIPHY) $(BIN)/`basename $(CAPTURE_BLADERF_WIPHY)`; \
	fi;

	@if test "$(BUILD_CAPTURE_HAK5_COCONUT)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_HAK5_COCONUT) $(BIN)/`basename $(CAPTURE_HAK5_COCONUT)` ; \
	fi;

	@if test "$(BUILD_CAPTURE_SERIAL_RADVIEW)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_SERIAL_RADVIEW) $(BIN)/`basename $(CAPTURE_SERIAL_RADVIEW)` ; \
	fi;

	@if test "$(BUILD_CAPTURE_USB_RADIACODE)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_USB_RADIACODE) $(BIN)/`basename $(CAPTURE_USB_RADIACODE)` ; \
	fi;

	@if test "$(BUILD_CAPTURE_SDR_RTL433V2)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_SDR_RTL433V2) $(BIN)/`basename $(CAPTURE_SDR_RTL433V2)` ; \
	fi;

	@if test "$(BUILD_CAPTURE_SDR_RTLADSBV2)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_SDR_RTLADSBV2) $(BIN)/`basename $(CAPTURE_SDR_RTLADSBV2)` ; \
	fi;

	@if test "$(BUILD_CAPTURE_FREAKLABS_ZIGBEEV2)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_FREAKLABS_ZIGBEEV2) $(BIN)/`basename $(CAPTURE_FREAKLABS_ZIGBEEV2)` ; \
	fi;

	@if test "$(BUILD_CAPTURE_CATSNIFFER_ZIGBEE)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_CATSNIFFER_ZIGBEE) $(BIN)/`basename $(CAPTURE_CATSNIFFER_ZIGBEE)` ; \
	fi;
	
commoninstall: $(INSTBINS)
	mkdir -p $(ETC)
	mkdir -p $(BIN)

	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(PS) $(BIN)/$(PS); 

	# Install the alias script
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 kismet_server $(BIN)/kismet_server; 

	# Install the compiled log tools
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_STRIP) $(BIN)/`basename $(LOGTOOL_KISMETDB_STRIP)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_JSON) $(BIN)/`basename $(LOGTOOL_KISMETDB_JSON)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_WIGLE) $(BIN)/`basename $(LOGTOOL_KISMETDB_WIGLE)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_STATS) $(BIN)/`basename $(LOGTOOL_KISMETDB_STATS)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_KML) $(BIN)/`basename $(LOGTOOL_KISMETDB_KML)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_GPX) $(BIN)/`basename $(LOGTOOL_KISMETDB_GPX)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_CLEAN) $(BIN)/`basename $(LOGTOOL_KISMETDB_CLEAN)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_PCAP) $(BIN)/`basename $(LOGTOOL_KISMETDB_PCAP)`;

	# Install the other tools
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(TOOL_KISMET_DISCOVERY) $(BIN)/`basename $(TOOL_KISMET_DISCOVERY)`;

	mkdir -p $(BIN)

	@if test "$(BUILD_CAPTURE_PCAPFILE)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_PCAPFILE) $(BIN)/$(CAPTURE_PCAPFILE); \
	fi;

	@if test "$(BUILD_CAPTURE_KISMETDB)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_KISMETDB) $(BIN)/$(CAPTURE_KISMETDB); \
	fi;

	@if test "$(BUILD_CAPTURE_LINUX_WIFI)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_LINUX_WIFI) $(BIN)/`basename $(CAPTURE_LINUX_WIFI)`; \
	fi;

	@if test "$(BUILD_CAPTURE_LINUX_BLUETOOTH)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_LINUX_BLUETOOTH) $(BIN)/`basename $(CAPTURE_LINUX_BLUETOOTH)`; \
	fi;

	@if test "$(BUILD_CAPTURE_OPENBSD_WIFI)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_OPENBSD_WIFI) $(BIN)/`basename $(CAPTURE_OPENBSD_WIFI)`; \
	fi;

	@if test "$(BUILD_CAPTURE_OSX_COREWLAN)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) $(CAPTURE_OSX_COREWLAN) $(BIN)/`basename $(CAPTURE_OSX_COREWLAN)`; \
	fi;

	@if test "$(BUILD_CAPTURE_HACKRF_SWEEP)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_HACKRF_SWEEP) $(BIN)/$(CAPTURE_HACKRF_SWEEP); \
	fi;

	@if test "$(BUILD_CAPTURE_NRF_MOUSEJACK)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_NRF_MOUSEJACK) $(BIN)/`basename $(CAPTURE_NRF_MOUSEJACK)`; \
	fi;

	@if test "$(BUILD_CAPTURE_TI_CC_2540)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_TI_CC_2540) $(BIN)/`basename $(CAPTURE_TI_CC_2540)`; \
	fi;

	@if test "$(BUILD_CAPTURE_TI_CC_2531)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_TI_CC_2531) $(BIN)/`basename $(CAPTURE_TI_CC_2531)`; \
	fi;

	@if test "$(BUILD_CAPTURE_UBERTOOTH_ONE)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_UBERTOOTH_ONE) $(BIN)/`basename $(CAPTURE_UBERTOOTH_ONE)`; \
        fi;

	@if test "$(BUILD_CAPTURE_NRF_51822)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_NRF_51822) $(BIN)/`basename $(CAPTURE_NRF_51822)`; \
	fi;

	@if test "$(BUILD_CAPTURE_NRF_52840)"x = "1"x; then \
			$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_NRF_52840) $(BIN)/`basename $(CAPTURE_NRF_52840)`; \
	fi;

	@if test "$(BUILD_CAPTURE_NXP_KW41Z)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_NXP_KW41Z) $(BIN)/`basename $(CAPTURE_NXP_KW41Z)`; \
	fi;

	@if test "$(BUILD_CAPTURE_SERIAL_RADVIEW)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_SERIAL_RADVIEW) $(BIN)/`basename $(CAPTURE_SERIAL_RADVIEW)`; \
	fi;

	@if test "$(BUILD_CAPTURE_USB_RADIACODE)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_USB_RADIACODE) $(BIN)/`basename $(CAPTURE_USB_RADIACODE)`; \
	fi;

	@if test "$(BUILD_CAPTURE_ANTSDR_DRONEID)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_ANTSDR_DRONEID) $(BIN)/`basename $(CAPTURE_ANTSDR_DRONEID)`; \
	fi;

	@if test "$(BUILD_CAPTURE_RZ_KILLERBEE)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_RZ_KILLERBEE) $(BIN)/`basename $(CAPTURE_RZ_KILLERBEE)`; \
	fi;

	@if test "$(BUILD_CAPTURE_BLADERF_WIPHY)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_BLADERF_WIPHY) $(BIN)/`basename $(CAPTURE_BLADERF_WIPHY)`; \
	fi;

	@if test "$(BUILD_CAPTURE_HAK5_COCONUT)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_HAK5_COCONUT) $(BIN)/`basename $(CAPTURE_HAK5_COCONUT)` && \
		mkdir -p $(SHARE)/firmware/ && \
		cp capture_hak5_wifi_coconut/libwifiuserspace/firmware/LICENSE-ralink-mediatek.txt $(SHARE)/firmware && \
		cp capture_hak5_wifi_coconut/libwifiuserspace/firmware/rt2870.bin $(SHARE)/firmware/ ; \
	fi;

	@if test "$(BUILD_CAPTURE_SDR_RTL433V2)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_SDR_RTL433V2) $(BIN)/`basename $(CAPTURE_SDR_RTL433V2)`; \
	fi;

	@if test "$(BUILD_CAPTURE_SDR_RTLADSBV2)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_SDR_RTLADSBV2) $(BIN)/`basename $(CAPTURE_SDR_RTLADSBV2)`; \
	fi;

	@if test "$(BUILD_CAPTURE_FREAKLABS_ZIGBEEV2)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_FREAKLABS_ZIGBEEV2) $(BIN)/`basename $(CAPTURE_FREAKLABS_ZIGBEEV2)`; \
	fi;

	@if test "$(BUILD_CAPTURE_CATSNIFFER_ZIGBEE)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_CATSNIFFER_ZIGBEE) $(BIN)/`basename $(CAPTURE_CATSNIFFER_ZIGBEE)`; \
	fi;
	
	mkdir -p $(LIB)/pkgconfig
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 packaging/kismet.pc $(LIB)/pkgconfig/kismet.pc

	mkdir -p $(HTTPD)
	cp -r http_data/* $(HTTPD)

	cp conf/kismet_manuf.txt.gz $(SHARE)/kismet_manuf.txt.gz
	cp conf/kismet_adsb_icao.txt.gz $(SHARE)/kismet_adsb_icao.txt.gz


CONFINSTTARGETS = $(addprefix install_conf_, $(CONFIGFILES))
${CONFINSTTARGETS}: install_conf_%: 
	@if test -f $(ETC)/$*; then \
		echo "$(ETC)/$* already exists; it will not be automatically replaced."; \
	else \
		echo install -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/$* $(ETC)/$*;  \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/$* $(ETC)/$*;  \
	fi

FORCECONFINSTTARGETS = $(addprefix install_force_conf_, $(CONFIGFILES))
${FORCECONFINSTTARGETS}: install_force_conf_%: 
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/$* $(ETC)/$*;  

configsinstall: $(CONFINSTTARGETS)
	@echo
	@echo
	@echo "Existing config files have not been replaced; if the Kismet "; 
	@echo "configuration files have changed, you will need to manually ";
	@echo "reconcile the differences in the config files!";
	@echo "You can replace all config files with: ";
	@echo "    make forceconfigs";
	@echo 
	@echo "You can simplify future configuration changes by using the ";
	@echo "kismet_site.conf config file, for more info see the docs at:";
	@echo "https://www.kismetwireless.net/docs/readme/config_files/";
	@echo
	@echo

suidinstall:
	-groupadd -r -f $(SUIDGROUP)

	@$(MAKE) -e commoninstall
	@$(MAKE) -e binsuidinstall

	@$(MAKE) configsinstall

	@echo
	@echo
	@echo "Installed kismet into $(BIN)/."
	@echo "If you have not done so already, read the README file and the FAQ file.  Additional"
	@echo "documentation is in the docs/ directory.  You MUST edit $(ETC)/kismet.conf "
	@echo "and configure Kismet for your system, or it will NOT run properly!"
	@echo
	@echo "Kismet has been installed with a SUID ROOT CAPTURE HELPER executable by "
	@echo "users in the group '" $(SUIDGROUP) "'.  This WILL ALLOW USERS IN THIS GROUP "
	@echo "TO ALTER YOUR NETWORK INTERFACE STATES, but is more secure than running "
	@echo "all of Kismet as root.  ONLY users in this group will be able to "
	@echo "run Kismet and capture from physical network devices."
	@echo
	@echo "If you have just created this group, you will need to log out and back in"
	@echo "before your user will have access.   Check the output of the 'groups' "
	@echo "command to make sure your user has the proper group!"
	@echo
	@echo "If you have installed Kismet in the past, you may need to UPDATE YOUR CONFIG"
	@echo "FILES or Kismet may not work properly!  You can manually reconcile differences"
	@echo "or you can replace the previously installed config files entirely by running"
	@echo "make forceconfigs"

install:
	@$(MAKE) -e commoninstall

	@$(MAKE) configsinstall

	@echo
	@echo
	@echo "Installed kismet into $(BIN)/."
	@echo "If you have not done so already, read the README file and the FAQ file.  Additional"
	@echo "documentation is in the docs/ directory.  You MUST edit $(ETC)/kismet.conf "
	@echo "and configure Kismet for your system, or it will NOT run properly!"
	@echo
	@echo "Kismet has NOT been installed suid-root.  This means you will need to start "
	@echo "it as root.  If you add your user to the $(SUIDGROUP) group and install "
	@echo "Kismet with 'make suidinstall', users in that group will be able to "
	@echo "run Kismet directly."
	@echo
	@echo "READ THE KISMET DOCUMENTATION ABOUT THE KISMET SECURITY MODEL TO"
	@echo "DECIDE IF YOU WANT TO INSTALL IT SUID-ROOT"
	@echo
	@echo "It is generally *MORE SECURE* to install Kismet with the suid-root "
	@echo "option."
	@echo
	@echo "If you have installed Kismet in the past, you may need to UPDATE YOUR CONFIG"
	@echo "FILES or Kismet may not work properly!  You can manually reconcile differences"
	@echo "or you can replace the previously installed config files entirely by running"
	@echo "make forceconfigs"

forceconfigs:
	$(MAKE) $(FORCECONFINSTTARGETS)

uavconfig:
	@echo "Generating kismet_uav.conf"
	@$(PYTHON) tools/compile_uav_conf.py conf/kismet_uav.conf.yaml > conf/kismet_uav.conf

manuf:
	@echo "Generating kismet_manuf.txt.gz"
	@$(PYTHON) tools/create_oui_db.py conf/kismet_manuf.txt.gz_new
	@mv conf/kismet_manuf.txt.gz_new conf/kismet_manuf.txt.gz

icao:
	@echo "Generating kismet_adsb_icao.txt.gz"
	@$(PYTHON) tools/create_icao_db.py conf/kismet_adsb_icao.txt.gz_new
	@mv conf/kismet_adsb_icao.txt.gz_new conf/kismet_adsb_icao.txt.gz

boostbits:
	@echo "Scanning boost deps in ASIO"
	@mv boost boost-old
	@mkdir boost-raw
	@bcp --boost=../boost/ beast asio boost-raw
	@mv boost-raw/boost boost

release-%:
	@echo $*
	@make manuf
	@make icao
	@git commit conf/kismet_manuf.txt.gz -m "Manuf update for $*" -m "Update OUI manuf for release $*"
	@git commit conf/kismet_adsb_icao.txt.gz -m "ICAO update for $*" -m "Update ADSB ICAO database for release $*"
	@git checkout -B kismet-`echo $* | cut -d- -f1,2`
	@./tools/mkversion.sh "$(BUILD_DATE)" "$*"
	@git commit version.h -m "Version bump for $*" -m "Bump versioning for release $*"
	@git tag kismet-$*
	@git archive --format tar --prefix kismet-$*/ kismet-$* | xz > ../kismet-$*.tar.xz
	@echo git push origin kismet-`echo $* | cut -d- -f1,2` --tags
	@echo git checkout master

subrelease-%:
	@echo $*
	@git checkout -B kismet-`echo $* | cut -d- -f1,2`
	@git pull origin kismet-`echo $* | cut -d- -f1,2`
	@./tools/mkversion.sh "$(BUILD_DATE)" "$*"
	@git commit version.h -m "Version bump for $*" -m "Bump versioning for release $*"
	@git tag kismet-$*
	@git archive --format tar --prefix kismet-$*/ kismet-$* | xz > ../kismet-$*.tar.xz
	@echo git push origin kismet-`echo $* | cut -d- -f1,2` --tags
	@echo git checkout master

rpm:
	@echo "Disabling SUID installation (RPM will handle setting the SUID bit.)"
	@( export SUID="no"; export INSTGRP=`id -g`; export MANGRP=`id -g`; \
		export INSTUSR=`id -u`; $(MAKE) -e install )

depclean:
	@-rm -f *.d
	@-rm -f bluetooth_parsers/*.d
	@-rm -f dot11_parsers/*.d
	@-rm -f log_tools/*.d
	@-rm -f protobuf_cpp/*.d

clean: all-plugins-clean depclean
	@-rm -f version.c
	@-rm -f *.o *.mo
	@-rm -f protobuf_cpp/*.o
	@-rm -f dot11_parsers/*.o
	@-rm -f bluetooth_parsers/*.o
	@-rm -f log_tools/*.o
	@-rm -f $(PS)
	@-rm -f $(CAPTURE_PCAPFILE)
	@-rm -f $(CAPTURE_KISMETDB)
	@-rm -f $(CAPTURE_LINUX_WIFI)
	@-rm -f $(CAPTURE_LINUX_BLUETOOTH)
	@-rm -f $(CAPTURE_OPENBSD_WIFI)
	@-rm -f $(CAPTURE_OSX_COREWLAN)
	@-rm -f $(CAPTURE_HACKRF_SWEEP)
	@-rm -f $(LOGTOOL_BINS)
	@(cd capture_linux_bluetooth && make clean)
	@(cd capture_linux_wifi && make clean)
	@(cd capture_osx_corewlan_wifi && make clean)
	@(cd capture_openbsd_wifi && make clean)
	@(cd capture_freaklabs_zigbee &&  make clean)
	@(cd capture_catsniffer_zigbee &&  make clean)
	# @(cd capture_sdr_rtl433 && make clean)
	# @(cd capture_sdr_rtlamr && make clean)
	# @(cd capture_sdr_rtladsb && make clean)
	@(cd capture_nrf_mousejack && make clean)
	@(cd capture_ti_cc_2540 && make clean)
	@(cd capture_ti_cc_2531 && make clean)
	@(cd capture_ubertooth_one && make clean)
	@(cd capture_nrf_51822 && make clean)
	@(cd capture_nrf_52840 && make clean)
	@(cd capture_nxp_kw41z && make clean)
	@(cd capture_rz_killerbee && make clean)
	@(cd capture_hak5_wifi_coconut && make clean)
	@(cd capture_serial_radview && make clean)
	@(cd capture_radiacode && make clean)
	@(cd capture_antsdr_droneid && make clean)

	@-rm -f $(DATASOURCE_COMMON_A)
	@-rm -f protobuf_cpp/*.pb.*

distclean: clean
	@-rm -f *~
	@-rm -f config.status
	@-rm -f config.h
	@-rm -f config.log
	@-rm -rf packaging/ipkg/usr 
	@-rm -rf packaging/pak
	@-rm -rf *.ipk
	@-rm -f scripts/kismet
	@-rm -f Makefile

plugins: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN: $$x"; ( cd "$$x"; make; ); done )

restricted-plugins: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN: $$x"; ( cd "$$x"; make; ); done )

plugins-clean:
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-CLEAN: $$x"; ( cd "$$x"; make clean; ); done )

restricted-plugins-clean:
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-CLEAN: $$x"; ( cd "$$x"; make clean; ); done )

plugins-install: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-INSTALL: $$x"; ( cd "$$x"; make install; ); done )

restricted-plugins-install: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-INSTALL: $$x"; ( cd "$$x"; make install; ); done )

plugins-userinstall: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-USERINSTALL: $$x"; ( cd "$$x"; make userinstall; ); done )

restricted-plugins-userinstall: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-USERINSTALL: $$x"; ( cd "$$x"; make userinstall; ); done )

all-plugins all-plugins-install all-plugins-userinstall all-plugins-clean: all-%: Makefile % restricted-%

# Disabled
# kaitai-parsers:
# 	@echo "Re-generating the kaitai_struct parsers requires the gpl3 licensed "
# 	@echo "kaitai_struct compiler; see http://http://kaitai.io/ for more info!"
# 	kaitai-struct-compiler --outdir kaitai_parsers/ -t cpp_stl -I kaitai_definitions/ kaitai_definitions/*.ksy
# 	file-rename -v -f 's/\.cpp$$/\.cc/' kaitai_parsers/*.cpp 

protobuf_cpp/%.pb.cc.d: %.pb.cc 
protobuf_cpp/%.pb.cc.o: %.pb.cc
protobuf_cpp/%.pb.cc: protobuf_definitions/%.proto
	$(PROTOCBIN) --cpp_out=./protobuf_cpp/ -I protobuf_definitions/ protobuf_definitions/$*.proto
protobuf_cpp/%.pb.h: protobuf_definitions/%.proto
	$(PROTOCBIN) --cpp_out=./protobuf_cpp/ -I protobuf_definitions/ protobuf_definitions/$*.proto

%.c.o:	%.c
%.c.o : %.c %.c.d
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $*.c -o $@

%.cc.o: %.cc
%.cc.o:	%.cc %.cc.d
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $*.cc -o $@

%.c.d:  %.c
	$(CC) -MM -MP $(CFLAGS) $(CPPFLAGS) -MT $*.c.o $*.c -MF $*.c.d

%.cc.d: %.cc $(PROTOBUF_CPP_H_TARGET)
	$(CXX) -MM -MP $(CXXFLAGS) $(CPPFLAGS) -MT $*.cc.o $*.cc -MF $*.cc.d

.PRECIOUS: %.c %.cc %.h %.Td %.c.d %.cc.d protobuf_cpp/%.pb.cc protobuf_cpp/%.pb.h protobuf_c/%.pb-c.c

include $(wildcard $(patsubst %c.o,%c.d,$(PSO)))
include $(wildcard $(patsubst %c.o,%c.d,$(DATASOURCE_COMMON_C_O)))
ifneq ($(BUILD_CAPTURE_PCAPFILE)x, "x")
	include $(wildcard $(patsubst %c.o,%c.d,$(CAPTURE_PCAPFILE_O)))
endif
ifneq ($(BUILD_CAPTURE_KISMETDB)x, "x")
	include $(wildcard $(patsubst %c.o,%c.d,$(CAPTURE_KISMETDB_O)))
endif
ifneq ($(BUILD_CAPTURE_HACKRF_SWEEP)x, "x")
	include $(wildcard $(patsubst %c.o,%c.d,$(CAPTURE_HACKRF_SWEEP_O)))
endif


include $(wildcard $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_WIGLE_O)))
include $(wildcard $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_STRIP_O)))
include $(wildcard $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_JSON_O)))
include $(wildcard $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_STATS_O)))
include $(wildcard $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_KML_O)))
include $(wildcard $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_GPX_O)))
include $(wildcard $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_CLEAN_O)))
include $(wildcard $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_PCAP_O)))


include $(wildcard $(patsubst %c.o,%c.d,$(TOOL_KISMET_DISCOVERY_O)))

.SUFFIXES: .c .cc .o .d

