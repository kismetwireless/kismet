include Makefile.inc

CONFIGFILES = \
	kismet.conf \
	kismet_httpd.conf \
	kismet_alerts.conf \
	kismet_memory.conf \
	kismet_storage.conf \
	kismet_logging.conf \
	kismet_filter.conf \
	kismet_uav.conf \
	kismet_80211.conf 

# Parsers (modeled on former Kaitai model)
PARSERS = \
	dot11_parsers/dot11_ie.cc.o \
	dot11_parsers/dot11_ie_7_country.cc.o \
	dot11_parsers/dot11_ie_11_qbss.cc.o \
	dot11_parsers/dot11_ie_33_power.cc.o \
	dot11_parsers/dot11_ie_36_supported_channels.cc.o \
	dot11_parsers/dot11_ie_45_ht_cap.cc.o \
	dot11_parsers/dot11_ie_48_rsn.cc.o \
	dot11_parsers/dot11_ie_52_rmm_neighbor.cc.o \
	dot11_parsers/dot11_ie_54_mobility.cc.o \
	dot11_parsers/dot11_ie_55_fastbss.cc.o \
	dot11_parsers/dot11_ie_61_ht_op.cc.o \
	dot11_parsers/dot11_ie_70_rm_capabilities.cc.o \
	dot11_parsers/dot11_ie_133_cisco_ccx.cc.o \
	dot11_parsers/dot11_ie_150_vendor.cc.o \
	dot11_parsers/dot11_ie_150_cisco_powerlevel.cc.o \
 	dot11_parsers/dot11_ie_191_vht_cap.cc.o \
 	dot11_parsers/dot11_ie_192_vht_op.cc.o \
	dot11_parsers/dot11_ie_127_extended_capabilities.cc.o \
 	dot11_parsers/dot11_ie_221_vendor.cc.o \
 	dot11_parsers/dot11_ie_221_ms_wps.cc.o \
 	dot11_parsers/dot11_ie_221_ms_wmm.cc.o \
 	dot11_parsers/dot11_ie_221_dji_droneid.cc.o \
 	dot11_parsers/dot11_ie_221_wfa_wpa.cc.o \
	dot11_parsers/dot11_ie_221_cisco_client_mfp.cc.o \
	dot11_parsers/dot11_ie_221_wpa_transition.cc.o \
	dot11_parsers/dot11_ie_221_rsn_pmkid.cc.o \
	dot11_parsers/dot11_ie_255_ext_tag.cc.o \
	dot11_parsers/dot11_action.cc.o \
	dot11_parsers/dot11_wpa_eap.cc.o \
	bluetooth_parsers/bt_rfinfo.cc.o

# To prevent a deps problem, we define these targets via autoconf to reference
# the variable setting the list
PROTOBUF_CPP_O_TARGET = @PROTOBUF_CPP_O_TARGET@
PROTOBUF_CPP_O = \
	protobuf_cpp/kismet.pb.cc.o \
	protobuf_cpp/http.pb.cc.o \
	protobuf_cpp/datasource.pb.cc.o \
	protobuf_cpp/linuxbluetooth.pb.cc.o 

PROTOBUF_CPP_H_TARGET = @PROTOBUF_CPP_H_TARGET@
PROTOBUF_CPP_H = \
	protobuf_cpp/kismet.pb.h \
	protobuf_cpp/http.pb.h \
	protobuf_cpp/datasource.pb.h \
	protobuf_cpp/linuxbluetooth.pb.h 

PROTOBUF_C_O = \
	protobuf_c/kismet.pb-c.c.o \
	protobuf_c/datasource.pb-c.c.o \
	protobuf_c/linuxbluetooth.pb-c.c.o 

PROTOBUF_C_H = \
	protobuf_c/kismet.pb-c.h \
	protobuf_c/datasource.pb-c.h \
	protobuf_c/linuxbluetooth.pb-c.h


# Common pure-c code for capturesource binaries
DATASOURCE_COMMON_C_O = \
	$(PROTOBUF_C_O) \
	simple_ringbuf_c.c.o capture_framework.c.o 
DATASOURCE_COMMON_A = libkismetdatasource.a

CAPTURE_PCAPFILE_O = \
	capture_pcapfile.c.o
CAPTURE_PCAPFILE 	= kismet_cap_pcapfile
BUILD_CAPTURE_PCAPFILE = @BUILD_CAPTURE_PCAPFILE@

CAPTURE_KISMETDB_O = \
	capture_kismetdb.c.o
CAPTURE_KISMETDB 	= kismet_cap_kismetdb
BUILD_CAPTURE_KISMETDB = @BUILD_CAPTURE_KISMETDB@

CAPTURE_LINUX_WIFI	= capture_linux_wifi/kismet_cap_linux_wifi
BUILD_CAPTURE_LINUX_WIFI = @BUILD_CAPTURE_LINUX_WIFI@

CAPTURE_HACKRF_SWEEP_O = \
	capture_hackrf_sweep.c.o
CAPTURE_HACKRF_SWEEP = kismet_cap_hackrf_sweep
BUILD_CAPTURE_HACKRF_SWEEP = @BUILD_CAPTURE_HACKRF_SWEEP@

CAPTURE_LINUX_BLUETOOTH = capture_linux_bluetooth/kismet_cap_linux_bluetooth
BUILD_CAPTURE_LINUX_BLUETOOTH = @BUILD_CAPTURE_LINUX_BLUETOOTH@

CAPTURE_OSX_COREWLAN = capture_osx_corewlan_wifi/kismet_cap_osx_corewlan_wifi
BUILD_CAPTURE_OSX_COREWLAN = @BUILD_CAPTURE_OSX_COREWLAN@

CAPTURE_SDR_RTL433 = capture_sdr_rtl433/kismet_cap_sdr_rtl433
BUILD_CAPTURE_SDR_RTL433 = @BUILD_CAPTURE_SDR_RTL433@

CAPTURE_SDR_RTLAMR = capture_sdr_rtlamr/kismet_cap_sdr_rtlamr
BUILD_CAPTURE_SDR_RTLAMR = @BUILD_CAPTURE_SDR_RTLAMR@

CAPTURE_SDR_RTLADSB = capture_sdr_rtladsb/kismet_cap_sdr_rtladsb
BUILD_CAPTURE_SDR_RTLADSB = @BUILD_CAPTURE_SDR_RTLADSB@

CAPTURE_FREAKLABS_ZIGBEE = capture_freaklabs_zigbee/kismet_cap_freaklabs_zigbee
BUILD_CAPTURE_FREAKLABS_ZIGBEE = @BUILD_CAPTURE_FREAKLABS_ZIGBEE@

CAPTURE_NRF_MOUSEJACK = capture_nrf_mousejack/kismet_cap_nrf_mousejack
BUILD_CAPTURE_NRF_MOUSEJACK = @BUILD_CAPTURE_NRF_MOUSEJACK@

# Capture binaries to build
DATASOURCE_BINS = @DATASOURCE_BINS@

LOGTOOL_KISMETDB_STRIP = log_tools/kismetdb_strip_packets

LOGTOOL_KISMETDB_WIGLE = log_tools/kismetdb_to_wiglecsv
LOGTOOL_KISMETDB_WIGLE_O = \
	log_tools/kismetdb_to_wiglecsv.cc.o \
	sqlite3_cpp11.cc.o jsoncpp.cc.o

LOGTOOL_KISMETDB_JSON = log_tools/kismetdb_dump_devices
LOGTOOL_KISMETDB_JSON_O = \
	log_tools/kismetdb_dump_devices.cc.o \
	sqlite3_cpp11.cc.o

LOGTOOL_KISMETDB_STATS = log_tools/kismetdb_statistics
LOGTOOL_KISMETDB_STATS_O = \
	log_tools/kismetdb_statistics.cc.o \
	sqlite3_cpp11.cc.o jsoncpp.cc.o

LOGTOOL_KISMETDB_KML = log_tools/kismetdb_to_kml
LOGTOOL_KISMETDB_KML_O = \
	log_tools/kismetdb_to_kml.cc.o \
	sqlite3_cpp11.cc.o jsoncpp.cc.o

LOGTOOL_BINS = \
	$(LOGTOOL_KISMETDB_STRIP) \
	$(LOGTOOL_KISMETDB_WIGLE) \
	$(LOGTOOL_KISMETDB_JSON) \
	$(LOGTOOL_KISMETDB_STATS) \
	$(LOGTOOL_KISMETDB_KML)

# Disabled; Kaitai generates unusable C++ code currently
# KAITAI_PARSERS = \
# 	kaitai_parsers/wpaeap.cc.o \
# 	kaitai_parsers/dot11_ie.cc.o \
# 	kaitai_parsers/dot11_action.cc.o \
# 	kaitai_parsers/dot11_ie_7_country.cc.o \
# 	kaitai_parsers/dot11_ie_11_qbss.cc.o \
# 	kaitai_parsers/dot11_ie_45_ht.cc.o \
# 	kaitai_parsers/dot11_ie_48_rsn.cc.o \
# 	kaitai_parsers/dot11_ie_48_rsn_partial.cc.o \
# 	kaitai_parsers/dot11_ie_52_rmm_neighbor.cc.o \
# 	kaitai_parsers/dot11_ie_54_mobility.cc.o \
# 	kaitai_parsers/dot11_ie_61_ht.cc.o \
# 	kaitai_parsers/dot11_ie_133_cisco_ccx.cc.o \
# 	kaitai_parsers/dot11_ie_191_vht_capabilities.cc.o \
# 	kaitai_parsers/dot11_ie_192_vht_operation.cc.o \
# 	kaitai_parsers/dot11_ie_221_vendor.cc.o \
# 	kaitai_parsers/dot11_ie_221_ms_wps.cc.o \
# 	kaitai_parsers/dot11_ie_221_ms_wmm.cc.o \
# 	kaitai_parsers/dot11_ie_221_dji_droneid.cc.o \
# 	kaitai_parsers/dot11_ie_221_wfa_wpa.cc.o

PSO	= util.cc.o macaddr.cc.o uuid.cc.o xxhash.cc.o boost_like_hash.cc.o sqlite3_cpp11.cc.o \
	globalregistry.cc.o eventbus.cc.o \
	pollabletracker.cc.o ringbuf2.cc.o chainbuf.cc.o filewritebuf.cc.o buffer_handler.cc.o \
	packet.cc.o messagebus.cc.o configfile.cc.o getopt.cc.o \
	psutils.cc.o battery.cc.o \
	tcpserver2.cc.o tcpclient2.cc.o serialclient2.cc.o pipeclient.cc.o socketclient.cc.o ipc_remote2.cc.o \
	$(PROTOBUF_CPP_O_TARGET) kis_external.cc.o \
	dlttracker.cc.o antennatracker.cc.o datasourcetracker.cc.o kis_datasource.cc.o \
	datasource_linux_bluetooth.cc.o datasource_rtl433.cc.o datasource_rtlamr.cc.o datasource_rtladsb.cc.o \
	kis_net_microhttpd.cc.o kis_net_microhttpd_handlers.cc.o system_monitor.cc.o base64.cc.o \
	kis_httpd_websession.cc.o kis_httpd_registry.cc.o \
	gpstracker.cc.o kis_gps.cc.o gpsnmea.cc.o gpsserial2.cc.o gpstcp.cc.o \
	gpsgpsd2.cc.o gpsfake.cc.o gpsweb.cc.o \
	packetchain.cc.o packet_filter.cc.o class_filter.cc.o \
	trackedelement.cc.o trackedcomponent.cc.o entrytracker.cc.o \
	trackedlocation.cc.o devicetracker_component.cc.o \
	devicetracker_view.cc.o devicetracker_view_workers.cc.o \
	jsoncpp.cc.o json_adapter.cc.o \
	plugintracker.cc.o alertracker.cc.o timetracker.cc.o channeltracker2.cc.o \
	devicetracker.cc.o devicetracker_workers.cc.o devicetracker_httpd.cc.o \
	kis_dlt.cc.o kis_dlt_ppi.cc.o kis_dlt_radiotap.cc.o \
	kaitaistream.cc.o \
	$(PARSERS) \
	phy_80211.cc.o phy_80211_components.cc.o phy_80211_dissectors.cc.o \
	phy_rtl433.cc.o phy_rtlamr.cc.o phy_rtladsb.cc.o phy_zwave.cc.o \
	phy_bluetooth.cc.o phy_uav_drone.cc.o phy_nrf_mousejack.cc.o \
	dot11_fingerprint.cc.o kis_dissector_ipdata.cc.o \
	manuf.cc.o \
	logtracker.cc.o kis_ppilogfile.cc.o kis_databaselogfile.cc.o kis_pcapnglogfile.cc.o \
	messagebus_restclient.cc.o \
	streamtracker.cc.o \
	pcapng_stream_ringbuf.cc.o streambuf_stream_buffer.cc.o \
	devicetracker_httpd_pcap.cc.o phy_80211_httpd_pcap.cc.o \
	kis_database.cc.o storageloader.cc.o \
	kismet_server.cc.o 

PS	= kismet

STD_ALL = Makefile $(PS) $(DATASOURCE_BINS) $(LOGTOOL_BINS)
DS_ONLY = Makefile $(DATASOURCE_BINS)

ALL	= @ALLTARGETS@

INSTBINS = $(PS) $(DATASOURCE_BINS) $(LOGTOOL_BINS)

all:	$(ALL)

all-with-plugins:
	@make plugins-clean
	@make all
	@make plugins

# Autogen the version file
version.c:	FORCE
	@{ $(GIT) rev-parse --short HEAD 2>/dev/null || echo "non-git-release"; } | awk ' BEGIN {print "#include \"version.h\""} {print "const char *VERSION_GIT_COMMIT = \"" $$0"\";"} END {}' > version.c
	@date | awk 'BEGIN {} {print "const char *VERSION_BUILD_TIME = \""$$0"\";"} END {} ' >> version.c

# Force remove version.c.o since it's left behind owned by root as part of suidinstall, which screws
# up a lot of builds for people; we assume we can `rm -f` it
version.c.o : version.c version.c.d
	@rm -f version.c.o
	$(CC) $(CFLAGS) $(CPPFLAGS) -c version.c -o version.c.o

$(PS):	$(PROTOBUF_CPP_O_TARGET) $(PROTOBUF_CPP_H_TARGET) $(PSO) $(patsubst %c.o,%c.d,$(PSO)) version.c.o
	$(LD) $(LDFLAGS) -o $(PS) $(PSO) version.c.o $(LIBS) $(CXXLIBS) $(PCAPLIBS) $(KSLIBS) -rdynamic

$(LOGTOOL_KISMETDB_STRIP):	log_tools/kismetdb_strip_packet_content.c.o log_tools/kismetdb_strip_packet_content.c.d
	$(CC) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_STRIP) log_tools/kismetdb_strip_packet_content.c.o -lsqlite3

$(LOGTOOL_KISMETDB_WIGLE):	$(LOGTOOL_KISMETDB_WIGLE_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_WIGLE_O))
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_WIGLE) $(LOGTOOL_KISMETDB_WIGLE_O) $(LIBS) $(CXXLIBS) -rdynamic

$(LOGTOOL_KISMETDB_JSON):	$(LOGTOOL_KISMETDB_JSON_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_JSON_O))
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_JSON) $(LOGTOOL_KISMETDB_JSON_O) $(LIBS) $(CXXLIBS) -rdynamic

$(LOGTOOL_KISMETDB_STATS):	$(LOGTOOL_KISMETDB_STATS_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_STATS_O))
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_STATS) $(LOGTOOL_KISMETDB_STATS_O) $(LIBS) $(CXXLIBS) -rdynamic

$(LOGTOOL_KISMETDB_KML):	$(LOGTOOL_KISMETDB_KML_O) $(patsubst %c.o,%c.d,$(LOGTOOL_KISMETDB_KML_O))
	$(LD) $(LDFLAGS) -o $(LOGTOOL_KISMETDB_KML) $(LOGTOOL_KISMETDB_KML_O) $(LIBS) $(CXXLIBS) -rdynamic

$(DATASOURCE_COMMON_A):	$(PROTOBUF_C_O) $(PROTOBUF_C_H) $(DATASOURCE_COMMON_C_O)
	$(AR) rcs $(DATASOURCE_COMMON_A) $(DATASOURCE_COMMON_C_O)

$(CAPTURE_PCAPFILE):	$(PROTOBUF_C_H) $(DATASOURCE_COMMON_A) $(CAPTURE_PCAPFILE_O)
	$(CC) $(LDFLAGS) -o $(CAPTURE_PCAPFILE) $(CAPTURE_PCAPFILE_O) $(DATASOURCE_COMMON_A) $(PCAPLIBS) $(DATASOURCE_LIBS)

$(CAPTURE_KISMETDB):	$(PROTOBUF_C_H) $(DATASOURCE_COMMON_A) $(CAPTURE_KISMETDB_O)
	$(CC) $(LDFLAGS) -o $(CAPTURE_KISMETDB) $(CAPTURE_KISMETDB_O) $(DATASOURCE_COMMON_A) $(DATASOURCE_LIBS) -lsqlite3

$(CAPTURE_LINUX_WIFI):	$(PROTOBUF_C_H) $(DATASOURCE_COMMON_A) FORCE
	(cd capture_linux_wifi && $(MAKE))

$(CAPTURE_LINUX_BLUETOOTH):	$(PROTOBUF_C_H) $(DATASOURCE_COMMON_A) FORCE
	(cd capture_linux_bluetooth && $(MAKE))

$(CAPTURE_OSX_COREWLAN): $(PROTOBUF_C_H) $(DATASOURCE_COMMON_A) FORCE
	(cd capture_osx_corewlan_wifi && $(MAKE))

$(CAPTURE_SDR_RTL433): FORCE
	(cd capture_sdr_rtl433 && $(MAKE))

$(CAPTURE_SDR_RTLAMR): FORCE
	(cd capture_sdr_rtlamr && $(MAKE))

$(CAPTURE_SDR_RTLADSB): FORCE
	(cd capture_sdr_rtladsb && $(MAKE))

$(CAPTURE_HACKRF_SWEEP):	$(PROTOBUF_C_H) $(DATASOURCE_COMMON_A) $(CAPTURE_HACKRF_SWEEP_O)
	$(CC) $(LDFLAGS) -o $(CAPTURE_HACKRF_SWEEP) $(CAPTURE_HACKRF_SWEEP_O) $(DATASOURCE_COMMON_A) -lhackrf -lfftw3 $(LIBMLIB) -lpthread -lm

$(CAPTURE_NRF_MOUSEJACK): $(PROTOBUF_C_H) $(DATASOURCE_COMMON_A) FORCE
	(cd capture_nrf_mousejack && $(MAKE))

$(CAPTURE_FREAKLABS_ZIGBEE): FORCE
	(cd capture_freaklabs_zigbee && $(MAKE))

FORCE:

datasources:	$(DATASOURCE_BINS)

Makefile: Makefile.in configure
	@-echo "'Makefile.in' or 'configure' are more current than this Makefile.  You should re-run 'configure'."

binsuidinstall: $(DATASOURCE_BINS)
	mkdir -p $(BIN)

	@if test "$(BUILD_CAPTURE_LINUX_WIFI)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_LINUX_WIFI) $(BIN)/`basename $(CAPTURE_LINUX_WIFI)`; \
	fi;

	@if test "$(BUILD_CAPTURE_LINUX_BLUETOOTH)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_LINUX_BLUETOOTH) $(BIN)/`basename $(CAPTURE_LINUX_BLUETOOTH)`; \
	fi;

	@if test "$(BUILD_CAPTURE_OSX_COREWLAN)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_OSX_COREWLAN) $(BIN)/`basename $(CAPTURE_OSX_COREWLAN)`; \
	fi;

	@if test "$(BUILD_CAPTURE_NRF_MOUSEJACK)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) -m 4550 $(CAPTURE_NRF_MOUSEJACK) $(BIN)/`basename $(CAPTURE_NRF_MOUSEJACK)`; \
	fi;

commoninstall: $(INSTBINS)
	mkdir -p $(ETC)
	mkdir -p $(BIN)

	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(PS) $(BIN)/$(PS); 

	# Install the alias script
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 kismet_server $(BIN)/kismet_server; 

	# Install the compiled log tools
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_STRIP) $(BIN)/`basename $(LOGTOOL_KISMETDB_STRIP)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_JSON) $(BIN)/`basename $(LOGTOOL_KISMETDB_JSON)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_WIGLE) $(BIN)/`basename $(LOGTOOL_KISMETDB_WIGLE)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_STATS) $(BIN)/`basename $(LOGTOOL_KISMETDB_STATS)`;
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 555 $(LOGTOOL_KISMETDB_KML) $(BIN)/`basename $(LOGTOOL_KISMETDB_KML)`;

	mkdir -p $(BIN)

	@if test "$(BUILD_CAPTURE_PCAPFILE)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_PCAPFILE) $(BIN)/$(CAPTURE_PCAPFILE); \
	fi;

	@if test "$(BUILD_CAPTURE_KISMETDB)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_KISMETDB) $(BIN)/$(CAPTURE_KISMETDB); \
	fi;

	@if test "$(BUILD_CAPTURE_LINUX_WIFI)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_LINUX_WIFI) $(BIN)/`basename $(CAPTURE_LINUX_WIFI)`; \
	fi;

	@if test "$(BUILD_CAPTURE_LINUX_BLUETOOTH)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_LINUX_BLUETOOTH) $(BIN)/`basename $(CAPTURE_LINUX_BLUETOOTH)`; \
	fi;

	@if test "$(BUILD_CAPTURE_OSX_COREWLAN)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(SUIDGROUP) $(CAPTURE_OSX_COREWLAN) $(BIN)/`basename $(CAPTURE_OSX_COREWLAN)`; \
	fi;

	@if test "$(BUILD_CAPTURE_HACKRF_SWEEP)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_HACKRF_SWEEP) $(BIN)/$(CAPTURE_HACKRF_SWEEP); \
	fi;

	@if test "$(BUILD_CAPTURE_NRF_MOUSEJACK)"x = "1"x; then \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) $(CAPTURE_NRF_MOUSEJACK) $(BIN)/`basename $(CAPTURE_NRF_MOUSEJACK)`; \
	fi;

	@if test "$(BUILD_CAPTURE_SDR_RTL433)"x = "1"x; then \
		(cd capture_sdr_rtl433 && $(MAKE) install) \
	fi;

	@if test "$(BUILD_CAPTURE_SDR_RTLAMR)"x = "1"x; then \
		(cd capture_sdr_rtlamr && $(MAKE) install) \
	fi;

	@if test "$(BUILD_CAPTURE_SDR_RTLADSB)"x = "1"x; then \
		(cd capture_sdr_rtladsb && $(MAKE) install) \
	fi;

	@if test "$(BUILD_CAPTURE_FREAKLABS_ZIGBEE)"x = "1"x; then \
		(cd capture_freaklabs_zigbee && $(MAKE) install) \
	fi;

	mkdir -p $(LIB)/pkgconfig
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 packaging/kismet.pc $(LIB)/pkgconfig/kismet.pc

	mkdir -p $(HTTPD)
	cp -r http_data/* $(HTTPD)

	cp conf/kismet_manuf.txt $(SHARE)/kismet_manuf.txt 


CONFINSTTARGETS = $(addprefix install_conf_, $(CONFIGFILES))
${CONFINSTTARGETS}: install_conf_%: 
	@if test -f $(ETC)/$*; then \
		echo "$(ETC)/$* already exists; it will not be automatically replaced."; \
	else \
		echo install -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/$* $(ETC)/$*;  \
		$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/$* $(ETC)/$*;  \
	fi

FORCECONFINSTTARGETS = $(addprefix install_force_conf_, $(CONFIGFILES))
${FORCECONFINSTTARGETS}: install_force_conf_%: 
	$(INSTALL) -o $(INSTUSR) -g $(INSTGRP) -m 644 conf/$* $(ETC)/$*;  

configsinstall:
	$(MAKE) $(CONFINSTTARGETS)

	@echo
	@echo
	@echo "Existing config files have not been replaced; if the Kismet "; 
	@echo "configuration files have changed, you will need to manually ";
	@echo "reconcile the differences in the config files!";
	@echo "You can replace all config files with: ";
	@echo "    make forceconfigs";
	@echo 
	@echo "You can simplify future configuration changes by using the ";
	@echo "kismet_site.conf config file, for more info see the docs at:";
	@echo "https://www.kismetwireless.net/docs/readme/config_files/";
	@echo
	@echo

suidinstall: $(PS) $(DATASOURCE_BINS)
	-groupadd -r -f $(SUIDGROUP)

	@$(MAKE) -e commoninstall
	@$(MAKE) -e binsuidinstall

	@$(MAKE) configsinstall

	@echo
	@echo
	@echo "Installed kismet into $(BIN)/."
	@echo "If you have not done so already, read the README file and the FAQ file.  Additional"
	@echo "documentation is in the docs/ directory.  You MUST edit $(ETC)/kismet.conf "
	@echo "and configure Kismet for your system, or it will NOT run properly!"
	@echo
	@echo "Kismet has been installed with a SUID ROOT CAPTURE HELPER executeable by "
	@echo "users in the group '" $(SUIDGROUP) "'.  This WILL ALLOW USERS IN THIS GROUP "
	@echo "TO ALTER YOUR NETWORK INTERACE STATES, but is more secure than running "
	@echo "all of Kismet as root.  ONLY users in this group will be able to "
	@echo "run Kismet and capture from physical network devices."
	@echo
	@echo "If you have just created this group, you will need to log out and back in"
	@echo "before your user will have access.   Check the output of the 'groups' "
	@echo "command to make sure your user has the proper group!"
	@echo
	@echo "If you have installed Kismet in the past, you may need to UPDATE YOUR CONFIG"
	@echo "FILES or Kismet may not work properly!  You can manually reconcile differences"
	@echo "or you can replace the previously installed config files entirely by running"
	@echo "make forceconfigs"

install: $(INSTBINS)
	@$(MAKE) -e commoninstall

	@$(MAKE) configsinstall

	@echo
	@echo
	@echo "Installed kismet into $(BIN)/."
	@echo "If you have not done so already, read the README file and the FAQ file.  Additional"
	@echo "documentation is in the docs/ directory.  You MUST edit $(ETC)/kismet.conf "
	@echo "and configure Kismet for your system, or it will NOT run properly!"
	@echo
	@echo "Kismet has NOT been installed suid-root.  This means you will need to start "
	@echo "it as root.  If you add your user to the $(SUIDGROUP) group and install "
	@echo "Kismet with 'make suidinstall', users in that group will be able to "
	@echo "run Kismet directly."
	@echo
	@echo "READ THE KISMET DOCUMENTATION ABOUT THE KISMET SECURITY MODEL TO"
	@echo "DECIDE IF YOU WANT TO INSTALL IT SUID-ROOT"
	@echo
	@echo "It is generally *MORE SECURE* to install Kismet with the suid-root "
	@echo "option."
	@echo
	@echo "If you have installed Kismet in the past, you may need to UPDATE YOUR CONFIG"
	@echo "FILES or Kismet may not work properly!  You can manually reconcile differences"
	@echo "or you can replace the previously installed config files entirely by running"
	@echo "make forceconfigs"

forceconfigs: 
	$(MAKE) $(FORCECONFINSTTARGETS)

uavconfig:
	@echo "Generating kismet_uav.conf"
	@python tools/compile_uav_conf.py conf/kismet_uav.conf.yaml > conf/kismet_uav.conf

manuf:
	@echo "Generating kismet_manuf.txt"
	@python tools/create_oui_db.py > conf/kismet_manuf.txt

extcappy:
	@echo "Updating kismetexternal python"
	@find ./ -path *kismetexternal* -name __init__.py -not  -path *build* -exec cp ../python-kismet-external/kismetexternal/__init__.py {} \; 

rpm:
	@echo "Disabling SUID installation (RPM will handle setting the SUID bit.)"
	@( export SUID="no"; export INSTGRP=`id -g`; export MANGRP=`id -g`; \
		export INSTUSR=`id -u`; $(MAKE) -e install )

depclean:
	@-rm -f *.d
	@-rm -f log_tools/*.d

clean:
	@-rm -f *.o *.mo
	@-rm -f *.d
	# @-rm -f kaitai_parsers/*.o
	# @-rm -f kaitai_parsers/*.d
	@-rm -f dot11_parsers/*.o
	@-rm -f dot11_parsers/*.d
	@-rm -f bluetooth_parsers/*.o
	@-rm -f bluetooth_parsers/*.d
	@-rm -f protobuf_cpp/*.pb.*
	@-rm -f protobuf_c/*.pb-c.*
	@-rm -f log_tools/*.o
	@-rm -f log_tools/*.d
	@-$(MAKE) all-plugins-clean
	@-rm -f $(PS)
	@-rm -f $(BUILD_CAPTURE_PCAPFILE)
	@-rm -f $(BUILD_CAPTURE_KISMETDB)
	@-rm -f $(BUILD_CAPTURE_LINUX_WIFI)
	@-rm -f $(BUILD_CAPTURE_LINUX_BLUETOOTH)
	@-rm -f $(BUILD_CAPTURE_OSX_COREWLAN)
	@-rm -f $(BUILD_CAPTURE_HACKRF_SWEEP)
	@-rm -f $(DATASOURCE_COMMON_A)
	@(cd capture_linux_bluetooth && make clean)
	@(cd capture_linux_wifi && make clean)
	@(cd capture_osx_corewlan_wifi && make clean)
	@(cd capture_sdr_rtl433 && make clean)
	@(cd capture_sdr_rtlamr && make clean)
	@(cd capture_sdr_rtladsb && make clean)

distclean:
	@-$(MAKE) clean
	@-$(MAKE) all-plugins-clean
	@-rm -f *~
	@-rm -f config.status
	@-rm -f config.h
	@-rm -f config.log
	@-rm -rf packaging/ipkg/usr 
	@-rm -rf packaging/pak
	@-rm -rf *.ipk
	@-rm -f scripts/kismet
	@-rm -f Makefile

plugins: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN: $$x"; ( cd "$$x"; make; ); done )

restricted-plugins: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN: $$x"; ( cd "$$x"; make; ); done )

plugins-clean:
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-CLEAN: $$x"; ( cd "$$x"; make clean; ); done )

restricted-plugins-clean:
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-CLEAN: $$x"; ( cd "$$x"; make clean; ); done )

plugins-install: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-INSTALL: $$x"; ( cd "$$x"; make install; ); done )

restricted-plugins-install: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-INSTALL: $$x"; ( cd "$$x"; make install; ); done )

plugins-userinstall: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-USERINSTALL: $$x"; ( cd "$$x"; make userinstall; ); done )

restricted-plugins-userinstall: Makefile
	@( export KIS_SRC_DIR=`pwd`; for x in restricted-plugin-*/; do  if [ ! -d "$$x" ]; then continue; fi; echo "PLUGIN-USERINSTALL: $$x"; ( cd "$$x"; make userinstall; ); done )

all-plugins: Makefile
	@$(MAKE) plugins
	@$(MAKE) restricted-plugins

all-plugins-install: Makefile
	@$(MAKE) plugins-install
	@$(MAKE) restricted-plugins-install

all-plugins-userinstall: Makefile
	@$(MAKE) plugins-userinstall
	@$(MAKE) restricted-plugins-userinstall

all-plugins-clean: Makefile
	@$(MAKE) plugins-clean
	@$(MAKE) restricted-plugins-clean

# Disabled
# kaitai-parsers:
# 	@echo "Re-generating the kaitai_struct parsers requires the gpl3 licensed "
# 	@echo "kaitai_struct compiler; see http://http://kaitai.io/ for more info!"
# 	kaitai-struct-compiler --outdir kaitai_parsers/ -t cpp_stl -I kaitai_definitions/ kaitai_definitions/*.ksy
# 	file-rename -v -f 's/\.cpp$$/\.cc/' kaitai_parsers/*.cpp 

protobuf_cpp/%.pb.cc.d: %.pb.cc 
protobuf_cpp/%.pb.cc.o: %.pb.cc
protobuf_cpp/%.pb.cc: protobuf_definitions/%.proto
	$(PROTOCBIN) --cpp_out=./protobuf_cpp/ -I protobuf_definitions/ protobuf_definitions/$*.proto
protobuf_cpp/%.pb.h: protobuf_definitions/%.proto
	$(PROTOCBIN) --cpp_out=./protobuf_cpp/ -I protobuf_definitions/ protobuf_definitions/$*.proto

protobuf_c/%.pb-c.c.o: %.pb-c.c 
protobuf_c/%.pb-c.c: protobuf_definitions/%.proto
	$(PROTOCCBIN) --c_out=./protobuf_c/ -I protobuf_definitions/ protobuf_definitions/$*.proto
protobuf_c/%.pb-c.h: protobuf_definitions/%.proto
	$(PROTOCCBIN) --c_out=./protobuf_c/ -I protobuf_definitions/ protobuf_definitions/$*.proto

%.c.o:	%.c
%.c.o : %.c %.c.d
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $*.c -o $@

%.cc.o: %.cc
%.cc.o:	%.cc %.cc.d
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $*.cc -o $@

%.c.d:  %.c $(PROTOBUF_C_H)
	$(CC) -MM $(CFLAGS) $(CPPFLAGS) -MT $*.c.o $*.c > $*.c.d

%.cc.d: %.cc $(PROTOBUF_CPP_H_TARGET)
	$(CXX) -MM $(CXXFLAGS) $(CPPFLAGS) -MT $*.cc.o $*.cc > $*.cc.d

.PRECIOUS: %.c %.cc %.h %.Td %.c.d %.cc.d protobuf_cpp/%.pb.cc protobuf_cpp/%.pb.h protobuf_c/%.pb-c.c protouf_c/%.pb-c.h

include $(wildcard $(patsubst %cc.o,%cc.d,$(PSO)))
include $(wildcard $(patsubst %c.o,%c.d,$(PSO)))
include $(wildcard $(patsubst %c.o,%c.d,$(DATASOURCE_COMMON_C_O)))
ifneq ($(BUILD_CAPTURE_PCAPFILE)x, "x")
	include $(wildcard $(patsubst %c.o,%c.d,$(CAPTURE_PCAPFILE_O)))
endif
ifneq ($(BUILD_CAPTURE_KISMETDB)x, "x")
	include $(wildcard $(patsubst %c.o,%c.d,$(CAPTURE_KISMETDB_O)))
endif
include $(wildcard $(patsubst %cc.o,%cc.d,$(LOGTOOL_KISMETDB_WIGLE_O)))
include $(wildcard $(patsubst %cc.o,%cc.d,$(LOGTOOL_KISMETDB_STRIP_O)))
include $(wildcard $(patsubst %cc.o,%cc.d,$(LOGTOOL_KISMETDB_JSON_O)))
include $(wildcard $(patsubst %cc.o,%cc.d,$(LOGTOOL_KISMETDB_STATS_O)))
include $(wildcard $(patsubst %cc.o,%cc.d,$(LOGTOOL_KISMETDB_KML_O)))

.SUFFIXES: .c .cc .o 

